// Code generated by neo-go contract generate-rpcwrapper --manifest <file.json> --out <file.go> [--hash <hash>] [--config <config>]; DO NOT EDIT.

// Package container contains RPC wrappers for NeoFS Container contract.
package container

import (
	"crypto/elliptic"
	"errors"
	"fmt"
	"github.com/google/uuid"
	"github.com/nspcc-dev/neo-go/pkg/core/transaction"
	"github.com/nspcc-dev/neo-go/pkg/crypto/keys"
	"github.com/nspcc-dev/neo-go/pkg/neorpc/result"
	"github.com/nspcc-dev/neo-go/pkg/rpcclient/unwrap"
	"github.com/nspcc-dev/neo-go/pkg/smartcontract"
	"github.com/nspcc-dev/neo-go/pkg/util"
	"github.com/nspcc-dev/neo-go/pkg/vm/stackitem"
	"math/big"
)

// ContainerContainer is a contract-specific container.Container type used by its methods.
type ContainerContainer struct {
	Value []byte
	Sig   []byte
	Pub   *keys.PublicKey
	Token []byte
}

// ContainerContainerSizes is a contract-specific container.ContainerSizes type used by its methods.
type ContainerContainerSizes struct {
	CID         []byte
	Estimations []*ContainerEstimation
}

// ContainerEstimation is a contract-specific container.Estimation type used by its methods.
type ContainerEstimation struct {
	From *keys.PublicKey
	Size *big.Int
}

// ContainerExtendedACL is a contract-specific container.ExtendedACL type used by its methods.
type ContainerExtendedACL struct {
	Value []byte
	Sig   []byte
	Pub   *keys.PublicKey
	Token []byte
}

// ContainerNodeReport is a contract-specific container.NodeReport type used by its methods.
type ContainerNodeReport struct {
	PublicKey       *keys.PublicKey
	ContainerSize   *big.Int
	NumberOfObjects *big.Int
	NumberOfReports *big.Int
}

// ContainerNodeReportSummary is a contract-specific container.NodeReportSummary type used by its methods.
type ContainerNodeReportSummary struct {
	ContainerSize   *big.Int
	NumberOfObjects *big.Int
}

// PutSuccessEvent represents "PutSuccess" event emitted by the contract.
type PutSuccessEvent struct {
	ContainerID util.Uint256
	PublicKey   *keys.PublicKey
}

// CreatedEvent represents "Created" event emitted by the contract.
type CreatedEvent struct {
	ContainerID util.Uint256
	Owner       []byte
}

// DeleteSuccessEvent represents "DeleteSuccess" event emitted by the contract.
type DeleteSuccessEvent struct {
	ContainerID []byte
}

// RemovedEvent represents "Removed" event emitted by the contract.
type RemovedEvent struct {
	ContainerID util.Uint256
	Owner       []byte
}

// SetEACLSuccessEvent represents "SetEACLSuccess" event emitted by the contract.
type SetEACLSuccessEvent struct {
	ContainerID []byte
	PublicKey   *keys.PublicKey
}

// EACLChangedEvent represents "EACLChanged" event emitted by the contract.
type EACLChangedEvent struct {
	ContainerID util.Uint256
}

// NodesUpdateEvent represents "NodesUpdate" event emitted by the contract.
type NodesUpdateEvent struct {
	ContainerID util.Uint256
}

// ObjectPutEvent represents "ObjectPut" event emitted by the contract.
type ObjectPutEvent struct {
	ContainerID util.Uint256
	ObjectID    util.Uint256
	Meta        map[any]any
}

// Invoker is used by ContractReader to call various safe methods.
type Invoker interface {
	Call(contract util.Uint160, operation string, params ...any) (*result.Invoke, error)
	CallAndExpandIterator(contract util.Uint160, method string, maxItems int, params ...any) (*result.Invoke, error)
	TerminateSession(sessionID uuid.UUID) error
	TraverseIterator(sessionID uuid.UUID, iterator *result.Iterator, num int) ([]stackitem.Item, error)
}

// Actor is used by Contract to call state-changing methods.
type Actor interface {
	Invoker

	MakeCall(contract util.Uint160, method string, params ...any) (*transaction.Transaction, error)
	MakeRun(script []byte) (*transaction.Transaction, error)
	MakeUnsignedCall(contract util.Uint160, method string, attrs []transaction.Attribute, params ...any) (*transaction.Transaction, error)
	MakeUnsignedRun(script []byte, attrs []transaction.Attribute) (*transaction.Transaction, error)
	SendCall(contract util.Uint160, method string, params ...any) (util.Uint256, uint32, error)
	SendRun(script []byte) (util.Uint256, uint32, error)
}

// ContractReader implements safe contract methods.
type ContractReader struct {
	invoker Invoker
	hash    util.Uint160
}

// Contract implements all contract methods.
type Contract struct {
	ContractReader
	actor Actor
	hash  util.Uint160
}

// NewReader creates an instance of ContractReader using provided contract hash and the given Invoker.
func NewReader(invoker Invoker, hash util.Uint160) *ContractReader {
	return &ContractReader{invoker, hash}
}

// New creates an instance of Contract using provided contract hash and the given Actor.
func New(actor Actor, hash util.Uint160) *Contract {
	return &Contract{ContractReader{actor, hash}, actor, hash}
}

// Alias invokes `alias` method of contract.
func (c *ContractReader) Alias(cid []byte) (string, error) {
	return unwrap.UTF8String(c.invoker.Call(c.hash, "alias", cid))
}

// ContainersOf invokes `containersOf` method of contract.
func (c *ContractReader) ContainersOf(owner []byte) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "containersOf", owner))
}

// ContainersOfExpanded is similar to ContainersOf (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) ContainersOfExpanded(owner []byte, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "containersOf", _numOfIteratorItems, owner))
}

// Count invokes `count` method of contract.
func (c *ContractReader) Count() (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "count"))
}

// EACL invokes `eACL` method of contract.
func (c *ContractReader) EACL(containerID []byte) (*ContainerExtendedACL, error) {
	return itemToContainerExtendedACL(unwrap.Item(c.invoker.Call(c.hash, "eACL", containerID)))
}

// Get invokes `get` method of contract.
func (c *ContractReader) Get(containerID []byte) (*ContainerContainer, error) {
	return itemToContainerContainer(unwrap.Item(c.invoker.Call(c.hash, "get", containerID)))
}

// GetContainerData invokes `getContainerData` method of contract.
func (c *ContractReader) GetContainerData(id []byte) ([]byte, error) {
	return unwrap.Bytes(c.invoker.Call(c.hash, "getContainerData", id))
}

// GetContainerSize invokes `getContainerSize` method of contract.
func (c *ContractReader) GetContainerSize(id []byte) (*ContainerContainerSizes, error) {
	return itemToContainerContainerSizes(unwrap.Item(c.invoker.Call(c.hash, "getContainerSize", id)))
}

// GetEACLData invokes `getEACLData` method of contract.
func (c *ContractReader) GetEACLData(id []byte) ([]byte, error) {
	return unwrap.Bytes(c.invoker.Call(c.hash, "getEACLData", id))
}

// GetNodeReportSummary invokes `getNodeReportSummary` method of contract.
func (c *ContractReader) GetNodeReportSummary(epoch *big.Int, cid util.Uint256) (*ContainerNodeReportSummary, error) {
	return itemToContainerNodeReportSummary(unwrap.Item(c.invoker.Call(c.hash, "getNodeReportSummary", epoch, cid)))
}

// GetReportByNode invokes `getReportByNode` method of contract.
func (c *ContractReader) GetReportByNode(epoch *big.Int, cid util.Uint256, pubKey *keys.PublicKey) (*ContainerNodeReport, error) {
	return itemToContainerNodeReport(unwrap.Item(c.invoker.Call(c.hash, "getReportByNode", epoch, cid, pubKey)))
}

// IterateAllContainerSizes invokes `iterateAllContainerSizes` method of contract.
func (c *ContractReader) IterateAllContainerSizes(epoch *big.Int) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "iterateAllContainerSizes", epoch))
}

// IterateAllContainerSizesExpanded is similar to IterateAllContainerSizes (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) IterateAllContainerSizesExpanded(epoch *big.Int, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "iterateAllContainerSizes", _numOfIteratorItems, epoch))
}

// IterateAllReportSummaries invokes `iterateAllReportSummaries` method of contract.
func (c *ContractReader) IterateAllReportSummaries(epoch *big.Int) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "iterateAllReportSummaries", epoch))
}

// IterateAllReportSummariesExpanded is similar to IterateAllReportSummaries (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) IterateAllReportSummariesExpanded(epoch *big.Int, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "iterateAllReportSummaries", _numOfIteratorItems, epoch))
}

// IterateContainerSizes invokes `iterateContainerSizes` method of contract.
func (c *ContractReader) IterateContainerSizes(epoch *big.Int, cid util.Uint256) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "iterateContainerSizes", epoch, cid))
}

// IterateContainerSizesExpanded is similar to IterateContainerSizes (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) IterateContainerSizesExpanded(epoch *big.Int, cid util.Uint256, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "iterateContainerSizes", _numOfIteratorItems, epoch, cid))
}

// IterateReports invokes `iterateReports` method of contract.
func (c *ContractReader) IterateReports(epoch *big.Int, cid util.Uint256) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "iterateReports", epoch, cid))
}

// IterateReportsExpanded is similar to IterateReports (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) IterateReportsExpanded(epoch *big.Int, cid util.Uint256, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "iterateReports", _numOfIteratorItems, epoch, cid))
}

// ListContainerSizes invokes `listContainerSizes` method of contract.
func (c *ContractReader) ListContainerSizes(epoch *big.Int) ([][]byte, error) {
	return unwrap.ArrayOfBytes(c.invoker.Call(c.hash, "listContainerSizes", epoch))
}

// Nodes invokes `nodes` method of contract.
func (c *ContractReader) Nodes(cID util.Uint256, placementVector *big.Int) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "nodes", cID, placementVector))
}

// NodesExpanded is similar to Nodes (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) NodesExpanded(cID util.Uint256, placementVector *big.Int, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "nodes", _numOfIteratorItems, cID, placementVector))
}

// Owner invokes `owner` method of contract.
func (c *ContractReader) Owner(containerID []byte) ([]byte, error) {
	return unwrap.Bytes(c.invoker.Call(c.hash, "owner", containerID))
}

// ReplicasNumbers invokes `replicasNumbers` method of contract.
func (c *ContractReader) ReplicasNumbers(cID util.Uint256) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "replicasNumbers", cID))
}

// ReplicasNumbersExpanded is similar to ReplicasNumbers (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) ReplicasNumbersExpanded(cID util.Uint256, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "replicasNumbers", _numOfIteratorItems, cID))
}

// VerifyPlacementSignatures invokes `verifyPlacementSignatures` method of contract.
func (c *ContractReader) VerifyPlacementSignatures(cid util.Uint256, msg []byte, sigs [][][]byte) (bool, error) {
	return unwrap.Bool(c.invoker.Call(c.hash, "verifyPlacementSignatures", cid, msg, sigs))
}

// Version invokes `version` method of contract.
func (c *ContractReader) Version() (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "version"))
}

// AddNextEpochNodes creates a transaction invoking `addNextEpochNodes` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) AddNextEpochNodes(cID util.Uint256, placementVector *big.Int, publicKeys keys.PublicKeys) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "addNextEpochNodes", cID, placementVector, publicKeys)
}

// AddNextEpochNodesTransaction creates a transaction invoking `addNextEpochNodes` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) AddNextEpochNodesTransaction(cID util.Uint256, placementVector *big.Int, publicKeys keys.PublicKeys) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "addNextEpochNodes", cID, placementVector, publicKeys)
}

// AddNextEpochNodesUnsigned creates a transaction invoking `addNextEpochNodes` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) AddNextEpochNodesUnsigned(cID util.Uint256, placementVector *big.Int, publicKeys keys.PublicKeys) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "addNextEpochNodes", nil, cID, placementVector, publicKeys)
}

// CommitContainerListUpdate creates a transaction invoking `commitContainerListUpdate` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) CommitContainerListUpdate(cID util.Uint256, replicas []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "commitContainerListUpdate", cID, replicas)
}

// CommitContainerListUpdateTransaction creates a transaction invoking `commitContainerListUpdate` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) CommitContainerListUpdateTransaction(cID util.Uint256, replicas []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "commitContainerListUpdate", cID, replicas)
}

// CommitContainerListUpdateUnsigned creates a transaction invoking `commitContainerListUpdate` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) CommitContainerListUpdateUnsigned(cID util.Uint256, replicas []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "commitContainerListUpdate", nil, cID, replicas)
}

// Create creates a transaction invoking `create` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) Create(cnr []byte, invocScript []byte, verifScript []byte, sessionToken []byte, name string, zone string, metaOnChain bool) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "create", cnr, invocScript, verifScript, sessionToken, name, zone, metaOnChain)
}

// CreateTransaction creates a transaction invoking `create` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) CreateTransaction(cnr []byte, invocScript []byte, verifScript []byte, sessionToken []byte, name string, zone string, metaOnChain bool) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "create", cnr, invocScript, verifScript, sessionToken, name, zone, metaOnChain)
}

// CreateUnsigned creates a transaction invoking `create` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) CreateUnsigned(cnr []byte, invocScript []byte, verifScript []byte, sessionToken []byte, name string, zone string, metaOnChain bool) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "create", nil, cnr, invocScript, verifScript, sessionToken, name, zone, metaOnChain)
}

// Delete creates a transaction invoking `delete` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) Delete(containerID []byte, signature []byte, token []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "delete", containerID, signature, token)
}

// DeleteTransaction creates a transaction invoking `delete` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) DeleteTransaction(containerID []byte, signature []byte, token []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "delete", containerID, signature, token)
}

// DeleteUnsigned creates a transaction invoking `delete` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) DeleteUnsigned(containerID []byte, signature []byte, token []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "delete", nil, containerID, signature, token)
}

// NewEpoch creates a transaction invoking `newEpoch` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) NewEpoch(epochNum *big.Int) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "newEpoch", epochNum)
}

// NewEpochTransaction creates a transaction invoking `newEpoch` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) NewEpochTransaction(epochNum *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "newEpoch", epochNum)
}

// NewEpochUnsigned creates a transaction invoking `newEpoch` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) NewEpochUnsigned(epochNum *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "newEpoch", nil, epochNum)
}

// Put creates a transaction invoking `put` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) Put(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "put", container, signature, publicKey, token)
}

// PutTransaction creates a transaction invoking `put` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) PutTransaction(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "put", container, signature, publicKey, token)
}

// PutUnsigned creates a transaction invoking `put` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) PutUnsigned(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "put", nil, container, signature, publicKey, token)
}

// PutContainerSize creates a transaction invoking `putContainerSize` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) PutContainerSize(epoch *big.Int, cid []byte, usedSize *big.Int, pubKey *keys.PublicKey) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "putContainerSize", epoch, cid, usedSize, pubKey)
}

// PutContainerSizeTransaction creates a transaction invoking `putContainerSize` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) PutContainerSizeTransaction(epoch *big.Int, cid []byte, usedSize *big.Int, pubKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "putContainerSize", epoch, cid, usedSize, pubKey)
}

// PutContainerSizeUnsigned creates a transaction invoking `putContainerSize` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) PutContainerSizeUnsigned(epoch *big.Int, cid []byte, usedSize *big.Int, pubKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "putContainerSize", nil, epoch, cid, usedSize, pubKey)
}

// PutEACL creates a transaction invoking `putEACL` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) PutEACL(eACL []byte, invocScript []byte, verifScript []byte, sessionToken []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "putEACL", eACL, invocScript, verifScript, sessionToken)
}

// PutEACLTransaction creates a transaction invoking `putEACL` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) PutEACLTransaction(eACL []byte, invocScript []byte, verifScript []byte, sessionToken []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "putEACL", eACL, invocScript, verifScript, sessionToken)
}

// PutEACLUnsigned creates a transaction invoking `putEACL` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) PutEACLUnsigned(eACL []byte, invocScript []byte, verifScript []byte, sessionToken []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "putEACL", nil, eACL, invocScript, verifScript, sessionToken)
}

// Put2 creates a transaction invoking `put` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) Put2(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string, metaOnChain bool) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "put", container, signature, publicKey, token, name, zone, metaOnChain)
}

// Put2Transaction creates a transaction invoking `put` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) Put2Transaction(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string, metaOnChain bool) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "put", container, signature, publicKey, token, name, zone, metaOnChain)
}

// Put2Unsigned creates a transaction invoking `put` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) Put2Unsigned(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string, metaOnChain bool) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "put", nil, container, signature, publicKey, token, name, zone, metaOnChain)
}

// PutNamed creates a transaction invoking `putNamed` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) PutNamed(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "putNamed", container, signature, publicKey, token, name, zone)
}

// PutNamedTransaction creates a transaction invoking `putNamed` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) PutNamedTransaction(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "putNamed", container, signature, publicKey, token, name, zone)
}

// PutNamedUnsigned creates a transaction invoking `putNamed` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) PutNamedUnsigned(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "putNamed", nil, container, signature, publicKey, token, name, zone)
}

// Put3 creates a transaction invoking `put` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) Put3(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "put", container, signature, publicKey, token, name, zone)
}

// Put3Transaction creates a transaction invoking `put` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) Put3Transaction(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "put", container, signature, publicKey, token, name, zone)
}

// Put3Unsigned creates a transaction invoking `put` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) Put3Unsigned(container []byte, signature []byte, publicKey *keys.PublicKey, token []byte, name string, zone string) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "put", nil, container, signature, publicKey, token, name, zone)
}

// PutReport creates a transaction invoking `putReport` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) PutReport(cid util.Uint256, sizeBytes *big.Int, objsNumber *big.Int, pubKey *keys.PublicKey) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "putReport", cid, sizeBytes, objsNumber, pubKey)
}

// PutReportTransaction creates a transaction invoking `putReport` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) PutReportTransaction(cid util.Uint256, sizeBytes *big.Int, objsNumber *big.Int, pubKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "putReport", cid, sizeBytes, objsNumber, pubKey)
}

// PutReportUnsigned creates a transaction invoking `putReport` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) PutReportUnsigned(cid util.Uint256, sizeBytes *big.Int, objsNumber *big.Int, pubKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "putReport", nil, cid, sizeBytes, objsNumber, pubKey)
}

// Remove creates a transaction invoking `remove` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) Remove(id []byte, invocScript []byte, verifScript []byte, sessionToken []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "remove", id, invocScript, verifScript, sessionToken)
}

// RemoveTransaction creates a transaction invoking `remove` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) RemoveTransaction(id []byte, invocScript []byte, verifScript []byte, sessionToken []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "remove", id, invocScript, verifScript, sessionToken)
}

// RemoveUnsigned creates a transaction invoking `remove` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) RemoveUnsigned(id []byte, invocScript []byte, verifScript []byte, sessionToken []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "remove", nil, id, invocScript, verifScript, sessionToken)
}

// SetEACL creates a transaction invoking `setEACL` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) SetEACL(eACL []byte, signature []byte, publicKey *keys.PublicKey, token []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "setEACL", eACL, signature, publicKey, token)
}

// SetEACLTransaction creates a transaction invoking `setEACL` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) SetEACLTransaction(eACL []byte, signature []byte, publicKey *keys.PublicKey, token []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "setEACL", eACL, signature, publicKey, token)
}

// SetEACLUnsigned creates a transaction invoking `setEACL` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) SetEACLUnsigned(eACL []byte, signature []byte, publicKey *keys.PublicKey, token []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "setEACL", nil, eACL, signature, publicKey, token)
}

// SubmitObjectPut creates a transaction invoking `submitObjectPut` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) SubmitObjectPut(metaInformation []byte, sigs [][][]byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "submitObjectPut", metaInformation, sigs)
}

// SubmitObjectPutTransaction creates a transaction invoking `submitObjectPut` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) SubmitObjectPutTransaction(metaInformation []byte, sigs [][][]byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "submitObjectPut", metaInformation, sigs)
}

// SubmitObjectPutUnsigned creates a transaction invoking `submitObjectPut` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) SubmitObjectPutUnsigned(metaInformation []byte, sigs [][][]byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "submitObjectPut", nil, metaInformation, sigs)
}

// Update creates a transaction invoking `update` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) Update(nefFile []byte, manifest []byte, data any) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "update", nefFile, manifest, data)
}

// UpdateTransaction creates a transaction invoking `update` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) UpdateTransaction(nefFile []byte, manifest []byte, data any) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "update", nefFile, manifest, data)
}

// UpdateUnsigned creates a transaction invoking `update` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) UpdateUnsigned(nefFile []byte, manifest []byte, data any) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "update", nil, nefFile, manifest, data)
}

// itemToContainerContainer converts stack item into *ContainerContainer.
// NULL item is returned as nil pointer without error.
func itemToContainerContainer(item stackitem.Item, err error) (*ContainerContainer, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(ContainerContainer)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *ContainerContainer is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&ContainerContainer{})

// Ensure *ContainerContainer is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&ContainerContainer{})

// FromStackItem retrieves fields of ContainerContainer from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *ContainerContainer) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 4 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.Value, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Value: %w", err)
	}

	index++
	res.Sig, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Sig: %w", err)
	}

	index++
	res.Pub, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Pub: %w", err)
	}

	index++
	res.Token, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Token: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing ContainerContainer.
// It implements [stackitem.Convertible] interface.
func (res *ContainerContainer) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 4)
	)
	itm, err = stackitem.NewByteArray(res.Value), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Value: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Sig), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Sig: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Pub.Bytes()), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Pub: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Token), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Token: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing ContainerContainer.
// It implements [smartcontract.Convertible] interface so that ContainerContainer
// could be used with invokers.
func (res *ContainerContainer) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 4)
	)
	prm, err = smartcontract.NewParameterFromValue(res.Value)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Value: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Sig)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Sig: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Pub)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Pub: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Token)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Token: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToContainerContainerSizes converts stack item into *ContainerContainerSizes.
// NULL item is returned as nil pointer without error.
func itemToContainerContainerSizes(item stackitem.Item, err error) (*ContainerContainerSizes, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(ContainerContainerSizes)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *ContainerContainerSizes is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&ContainerContainerSizes{})

// Ensure *ContainerContainerSizes is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&ContainerContainerSizes{})

// FromStackItem retrieves fields of ContainerContainerSizes from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *ContainerContainerSizes) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.CID, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field CID: %w", err)
	}

	index++
	res.Estimations, err = func(item stackitem.Item) ([]*ContainerEstimation, error) {
		arr, ok := item.Value().([]stackitem.Item)
		if !ok {
			return nil, errors.New("not an array")
		}
		res := make([]*ContainerEstimation, len(arr))
		for i := range res {
			res[i], err = itemToContainerEstimation(arr[i], nil)
			if err != nil {
				return nil, fmt.Errorf("item %d: %w", i, err)
			}
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Estimations: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing ContainerContainerSizes.
// It implements [stackitem.Convertible] interface.
func (res *ContainerContainerSizes) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 2)
	)
	itm, err = stackitem.NewByteArray(res.CID), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field CID: %w", err)
	}
	items = append(items, itm)

	itm, err = func(in []*ContainerEstimation) (stackitem.Item, error) {
		if in == nil {
			return stackitem.Null{}, nil
		}

		var items = make([]stackitem.Item, 0, len(in))
		for i, v := range in {
			itm, err := v.ToStackItem()
			if err != nil {
				return nil, fmt.Errorf("item %d: %w", i, err)
			}
			items = append(items, itm)
		}
		return stackitem.NewArray(items), nil
	}(res.Estimations)
	if err != nil {
		return nil, fmt.Errorf("field Estimations: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing ContainerContainerSizes.
// It implements [smartcontract.Convertible] interface so that ContainerContainerSizes
// could be used with invokers.
func (res *ContainerContainerSizes) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 2)
	)
	prm, err = smartcontract.NewParameterFromValue(res.CID)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field CID: %w", err)
	}
	prms = append(prms, prm)

	prm, err = func(in []*ContainerEstimation) (smartcontract.Parameter, error) {
		if in == nil {
			return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
		}

		var prms = make([]smartcontract.Parameter, 0, len(in))
		for i, v := range in {
			prm, err := v.ToSCParameter()
			if err != nil {
				return smartcontract.Parameter{}, fmt.Errorf("item %d: %w", i, err)
			}
			prms = append(prms, prm)
		}
		return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
	}(res.Estimations)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Estimations: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToContainerEstimation converts stack item into *ContainerEstimation.
// NULL item is returned as nil pointer without error.
func itemToContainerEstimation(item stackitem.Item, err error) (*ContainerEstimation, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(ContainerEstimation)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *ContainerEstimation is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&ContainerEstimation{})

// Ensure *ContainerEstimation is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&ContainerEstimation{})

// FromStackItem retrieves fields of ContainerEstimation from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *ContainerEstimation) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.From, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field From: %w", err)
	}

	index++
	res.Size, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field Size: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing ContainerEstimation.
// It implements [stackitem.Convertible] interface.
func (res *ContainerEstimation) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 2)
	)
	itm, err = stackitem.NewByteArray(res.From.Bytes()), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field From: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.Size), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Size: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing ContainerEstimation.
// It implements [smartcontract.Convertible] interface so that ContainerEstimation
// could be used with invokers.
func (res *ContainerEstimation) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 2)
	)
	prm, err = smartcontract.NewParameterFromValue(res.From)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field From: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Size)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Size: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToContainerExtendedACL converts stack item into *ContainerExtendedACL.
// NULL item is returned as nil pointer without error.
func itemToContainerExtendedACL(item stackitem.Item, err error) (*ContainerExtendedACL, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(ContainerExtendedACL)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *ContainerExtendedACL is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&ContainerExtendedACL{})

// Ensure *ContainerExtendedACL is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&ContainerExtendedACL{})

// FromStackItem retrieves fields of ContainerExtendedACL from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *ContainerExtendedACL) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 4 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.Value, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Value: %w", err)
	}

	index++
	res.Sig, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Sig: %w", err)
	}

	index++
	res.Pub, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Pub: %w", err)
	}

	index++
	res.Token, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Token: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing ContainerExtendedACL.
// It implements [stackitem.Convertible] interface.
func (res *ContainerExtendedACL) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 4)
	)
	itm, err = stackitem.NewByteArray(res.Value), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Value: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Sig), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Sig: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Pub.Bytes()), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Pub: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Token), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Token: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing ContainerExtendedACL.
// It implements [smartcontract.Convertible] interface so that ContainerExtendedACL
// could be used with invokers.
func (res *ContainerExtendedACL) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 4)
	)
	prm, err = smartcontract.NewParameterFromValue(res.Value)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Value: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Sig)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Sig: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Pub)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Pub: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Token)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Token: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToContainerNodeReport converts stack item into *ContainerNodeReport.
// NULL item is returned as nil pointer without error.
func itemToContainerNodeReport(item stackitem.Item, err error) (*ContainerNodeReport, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(ContainerNodeReport)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *ContainerNodeReport is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&ContainerNodeReport{})

// Ensure *ContainerNodeReport is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&ContainerNodeReport{})

// FromStackItem retrieves fields of ContainerNodeReport from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *ContainerNodeReport) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 4 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.PublicKey, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field PublicKey: %w", err)
	}

	index++
	res.ContainerSize, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field ContainerSize: %w", err)
	}

	index++
	res.NumberOfObjects, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field NumberOfObjects: %w", err)
	}

	index++
	res.NumberOfReports, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field NumberOfReports: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing ContainerNodeReport.
// It implements [stackitem.Convertible] interface.
func (res *ContainerNodeReport) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 4)
	)
	itm, err = stackitem.NewByteArray(res.PublicKey.Bytes()), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field PublicKey: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.ContainerSize), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field ContainerSize: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.NumberOfObjects), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field NumberOfObjects: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.NumberOfReports), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field NumberOfReports: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing ContainerNodeReport.
// It implements [smartcontract.Convertible] interface so that ContainerNodeReport
// could be used with invokers.
func (res *ContainerNodeReport) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 4)
	)
	prm, err = smartcontract.NewParameterFromValue(res.PublicKey)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field PublicKey: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.ContainerSize)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field ContainerSize: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.NumberOfObjects)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field NumberOfObjects: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.NumberOfReports)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field NumberOfReports: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToContainerNodeReportSummary converts stack item into *ContainerNodeReportSummary.
// NULL item is returned as nil pointer without error.
func itemToContainerNodeReportSummary(item stackitem.Item, err error) (*ContainerNodeReportSummary, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(ContainerNodeReportSummary)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *ContainerNodeReportSummary is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&ContainerNodeReportSummary{})

// Ensure *ContainerNodeReportSummary is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&ContainerNodeReportSummary{})

// FromStackItem retrieves fields of ContainerNodeReportSummary from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *ContainerNodeReportSummary) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.ContainerSize, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field ContainerSize: %w", err)
	}

	index++
	res.NumberOfObjects, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field NumberOfObjects: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing ContainerNodeReportSummary.
// It implements [stackitem.Convertible] interface.
func (res *ContainerNodeReportSummary) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 2)
	)
	itm, err = (*stackitem.BigInteger)(res.ContainerSize), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field ContainerSize: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.NumberOfObjects), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field NumberOfObjects: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing ContainerNodeReportSummary.
// It implements [smartcontract.Convertible] interface so that ContainerNodeReportSummary
// could be used with invokers.
func (res *ContainerNodeReportSummary) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 2)
	)
	prm, err = smartcontract.NewParameterFromValue(res.ContainerSize)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field ContainerSize: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.NumberOfObjects)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field NumberOfObjects: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// PutSuccessEventsFromApplicationLog retrieves a set of all emitted events
// with "PutSuccess" name from the provided [result.ApplicationLog].
func PutSuccessEventsFromApplicationLog(log *result.ApplicationLog) ([]*PutSuccessEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*PutSuccessEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "PutSuccess" {
				continue
			}
			event := new(PutSuccessEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize PutSuccessEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to PutSuccessEvent or
// returns an error if it's not possible to do to so.
func (e *PutSuccessEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = func(item stackitem.Item) (util.Uint256, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint256{}, err
		}
		u, err := util.Uint256DecodeBytesBE(b)
		if err != nil {
			return util.Uint256{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	index++
	e.PublicKey, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field PublicKey: %w", err)
	}

	return nil
}

// CreatedEventsFromApplicationLog retrieves a set of all emitted events
// with "Created" name from the provided [result.ApplicationLog].
func CreatedEventsFromApplicationLog(log *result.ApplicationLog) ([]*CreatedEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*CreatedEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "Created" {
				continue
			}
			event := new(CreatedEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize CreatedEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to CreatedEvent or
// returns an error if it's not possible to do to so.
func (e *CreatedEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = func(item stackitem.Item) (util.Uint256, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint256{}, err
		}
		u, err := util.Uint256DecodeBytesBE(b)
		if err != nil {
			return util.Uint256{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	index++
	e.Owner, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Owner: %w", err)
	}

	return nil
}

// DeleteSuccessEventsFromApplicationLog retrieves a set of all emitted events
// with "DeleteSuccess" name from the provided [result.ApplicationLog].
func DeleteSuccessEventsFromApplicationLog(log *result.ApplicationLog) ([]*DeleteSuccessEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*DeleteSuccessEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "DeleteSuccess" {
				continue
			}
			event := new(DeleteSuccessEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize DeleteSuccessEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to DeleteSuccessEvent or
// returns an error if it's not possible to do to so.
func (e *DeleteSuccessEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	return nil
}

// RemovedEventsFromApplicationLog retrieves a set of all emitted events
// with "Removed" name from the provided [result.ApplicationLog].
func RemovedEventsFromApplicationLog(log *result.ApplicationLog) ([]*RemovedEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*RemovedEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "Removed" {
				continue
			}
			event := new(RemovedEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize RemovedEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to RemovedEvent or
// returns an error if it's not possible to do to so.
func (e *RemovedEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = func(item stackitem.Item) (util.Uint256, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint256{}, err
		}
		u, err := util.Uint256DecodeBytesBE(b)
		if err != nil {
			return util.Uint256{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	index++
	e.Owner, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Owner: %w", err)
	}

	return nil
}

// SetEACLSuccessEventsFromApplicationLog retrieves a set of all emitted events
// with "SetEACLSuccess" name from the provided [result.ApplicationLog].
func SetEACLSuccessEventsFromApplicationLog(log *result.ApplicationLog) ([]*SetEACLSuccessEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*SetEACLSuccessEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "SetEACLSuccess" {
				continue
			}
			event := new(SetEACLSuccessEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize SetEACLSuccessEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to SetEACLSuccessEvent or
// returns an error if it's not possible to do to so.
func (e *SetEACLSuccessEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	index++
	e.PublicKey, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field PublicKey: %w", err)
	}

	return nil
}

// EACLChangedEventsFromApplicationLog retrieves a set of all emitted events
// with "EACLChanged" name from the provided [result.ApplicationLog].
func EACLChangedEventsFromApplicationLog(log *result.ApplicationLog) ([]*EACLChangedEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*EACLChangedEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "EACLChanged" {
				continue
			}
			event := new(EACLChangedEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize EACLChangedEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to EACLChangedEvent or
// returns an error if it's not possible to do to so.
func (e *EACLChangedEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = func(item stackitem.Item) (util.Uint256, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint256{}, err
		}
		u, err := util.Uint256DecodeBytesBE(b)
		if err != nil {
			return util.Uint256{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	return nil
}

// NodesUpdateEventsFromApplicationLog retrieves a set of all emitted events
// with "NodesUpdate" name from the provided [result.ApplicationLog].
func NodesUpdateEventsFromApplicationLog(log *result.ApplicationLog) ([]*NodesUpdateEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*NodesUpdateEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "NodesUpdate" {
				continue
			}
			event := new(NodesUpdateEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize NodesUpdateEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to NodesUpdateEvent or
// returns an error if it's not possible to do to so.
func (e *NodesUpdateEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = func(item stackitem.Item) (util.Uint256, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint256{}, err
		}
		u, err := util.Uint256DecodeBytesBE(b)
		if err != nil {
			return util.Uint256{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	return nil
}

// ObjectPutEventsFromApplicationLog retrieves a set of all emitted events
// with "ObjectPut" name from the provided [result.ApplicationLog].
func ObjectPutEventsFromApplicationLog(log *result.ApplicationLog) ([]*ObjectPutEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*ObjectPutEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "ObjectPut" {
				continue
			}
			event := new(ObjectPutEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize ObjectPutEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to ObjectPutEvent or
// returns an error if it's not possible to do to so.
func (e *ObjectPutEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 3 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.ContainerID, err = func(item stackitem.Item) (util.Uint256, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint256{}, err
		}
		u, err := util.Uint256DecodeBytesBE(b)
		if err != nil {
			return util.Uint256{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field ContainerID: %w", err)
	}

	index++
	e.ObjectID, err = func(item stackitem.Item) (util.Uint256, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint256{}, err
		}
		u, err := util.Uint256DecodeBytesBE(b)
		if err != nil {
			return util.Uint256{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field ObjectID: %w", err)
	}

	index++
	e.Meta, err = func(item stackitem.Item) (map[any]any, error) {
		m, ok := item.Value().([]stackitem.MapElement)
		if !ok {
			return nil, fmt.Errorf("%s is not a map", item.Type().String())
		}
		res := make(map[any]any)
		for i := range m {
			k, err := m[i].Key.Value(), error(nil)
			if err != nil {
				return nil, fmt.Errorf("key %d: %w", i, err)
			}
			v, err := m[i].Value.Value(), error(nil)
			if err != nil {
				return nil, fmt.Errorf("value %d: %w", i, err)
			}
			res[k] = v
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Meta: %w", err)
	}

	return nil
}
