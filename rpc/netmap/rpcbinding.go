// Code generated by neo-go contract generate-rpcwrapper --manifest <file.json> --out <file.go> [--hash <hash>] [--config <config>]; DO NOT EDIT.

// Package netmap contains RPC wrappers for NeoFS Netmap contract.
package netmap

import (
	"crypto/elliptic"
	"errors"
	"fmt"
	"github.com/google/uuid"
	"github.com/nspcc-dev/neo-go/pkg/core/transaction"
	"github.com/nspcc-dev/neo-go/pkg/crypto/keys"
	"github.com/nspcc-dev/neo-go/pkg/neorpc/result"
	"github.com/nspcc-dev/neo-go/pkg/rpcclient/nep22"
	"github.com/nspcc-dev/neo-go/pkg/rpcclient/unwrap"
	"github.com/nspcc-dev/neo-go/pkg/smartcontract"
	"github.com/nspcc-dev/neo-go/pkg/util"
	"github.com/nspcc-dev/neo-go/pkg/vm/stackitem"
	"math/big"
	"unicode/utf8"
)

// CommonIRNode is a contract-specific common.IRNode type used by its methods.
type CommonIRNode struct {
	PublicKey *keys.PublicKey
}

// NetmapCandidate is a contract-specific netmap.Candidate type used by its methods.
type NetmapCandidate struct {
	Addresses       []string
	Attributes      map[string]string
	Key             *keys.PublicKey
	State           *big.Int
	LastActiveEpoch *big.Int
}

// NetmapConfigRecord is a contract-specific netmap.ConfigRecord type used by its methods.
type NetmapConfigRecord struct {
	Key   []byte
	Value []byte
}

// NetmapNode is a contract-specific netmap.Node type used by its methods.
type NetmapNode struct {
	BLOB  []byte
	State *big.Int
}

// NetmapNode2 is a contract-specific netmap.Node2 type used by its methods.
type NetmapNode2 struct {
	Addresses  []string
	Attributes map[string]string
	Key        *keys.PublicKey
	State      *big.Int
}

// AddNodeEvent represents "AddNode" event emitted by the contract.
type AddNodeEvent struct {
	PublicKey  *keys.PublicKey
	Addresses  []any
	Attributes map[any]any
}

// AddPeerSuccessEvent represents "AddPeerSuccess" event emitted by the contract.
type AddPeerSuccessEvent struct {
	PublicKey *keys.PublicKey
}

// UpdateStateSuccessEvent represents "UpdateStateSuccess" event emitted by the contract.
type UpdateStateSuccessEvent struct {
	PublicKey *keys.PublicKey
	State     *big.Int
}

// NewEpochEvent represents "NewEpoch" event emitted by the contract.
type NewEpochEvent struct {
	Epoch *big.Int
}

// NewEpochSubscriptionEvent represents "NewEpochSubscription" event emitted by the contract.
type NewEpochSubscriptionEvent struct {
	Contract util.Uint160
}

// NewEpochUnsubscriptionEvent represents "NewEpochUnsubscription" event emitted by the contract.
type NewEpochUnsubscriptionEvent struct {
	Contract util.Uint160
}

// Invoker is used by ContractReader to call various safe methods.
type Invoker interface {
	Call(contract util.Uint160, operation string, params ...any) (*result.Invoke, error)
	CallAndExpandIterator(contract util.Uint160, method string, maxItems int, params ...any) (*result.Invoke, error)
	TerminateSession(sessionID uuid.UUID) error
	TraverseIterator(sessionID uuid.UUID, iterator *result.Iterator, num int) ([]stackitem.Item, error)
}

// Actor is used by Contract to call state-changing methods.
type Actor interface {
	Invoker

	nep22.Actor

	MakeCall(contract util.Uint160, method string, params ...any) (*transaction.Transaction, error)
	MakeRun(script []byte) (*transaction.Transaction, error)
	MakeUnsignedCall(contract util.Uint160, method string, attrs []transaction.Attribute, params ...any) (*transaction.Transaction, error)
	MakeUnsignedRun(script []byte, attrs []transaction.Attribute) (*transaction.Transaction, error)
	SendCall(contract util.Uint160, method string, params ...any) (util.Uint256, uint32, error)
	SendRun(script []byte) (util.Uint256, uint32, error)
}

// ContractReader implements safe contract methods.
type ContractReader struct {
	invoker Invoker
	hash    util.Uint160
}

// Contract implements all contract methods.
type Contract struct {
	ContractReader
	nep22.Contract
	actor Actor
	hash  util.Uint160
}

// NewReader creates an instance of ContractReader using provided contract hash and the given Invoker.
func NewReader(invoker Invoker, hash util.Uint160) *ContractReader {
	return &ContractReader{invoker, hash}
}

// New creates an instance of Contract using provided contract hash and the given Actor.
func New(actor Actor, hash util.Uint160) *Contract {
	return &Contract{ContractReader{actor, hash}, *nep22.NewContract(actor, hash), actor, hash}
}

// CleanupThreshold invokes `cleanupThreshold` method of contract.
func (c *ContractReader) CleanupThreshold() (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "cleanupThreshold"))
}

// Config invokes `config` method of contract.
func (c *ContractReader) Config(key []byte) (any, error) {
	return func(item stackitem.Item, err error) (any, error) {
		if err != nil {
			return nil, err
		}
		return item.Value(), error(nil)
	}(unwrap.Item(c.invoker.Call(c.hash, "config", key)))
}

// Epoch invokes `epoch` method of contract.
func (c *ContractReader) Epoch() (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "epoch"))
}

// GetEpochBlock invokes `getEpochBlock` method of contract.
func (c *ContractReader) GetEpochBlock(epoch *big.Int) (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "getEpochBlock", epoch))
}

// GetEpochTime invokes `getEpochTime` method of contract.
func (c *ContractReader) GetEpochTime(epoch *big.Int) (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "getEpochTime", epoch))
}

// InnerRingList invokes `innerRingList` method of contract.
func (c *ContractReader) InnerRingList() ([]*CommonIRNode, error) {
	return func(item stackitem.Item, err error) ([]*CommonIRNode, error) {
		if err != nil {
			return nil, err
		}
		return func(item stackitem.Item) ([]*CommonIRNode, error) {
			arr, ok := item.Value().([]stackitem.Item)
			if !ok {
				return nil, errors.New("not an array")
			}
			res := make([]*CommonIRNode, len(arr))
			for i := range res {
				res[i], err = itemToCommonIRNode(arr[i], nil)
				if err != nil {
					return nil, fmt.Errorf("item %d: %w", i, err)
				}
			}
			return res, nil
		}(item)
	}(unwrap.Item(c.invoker.Call(c.hash, "innerRingList")))
}

// IsStorageNode invokes `isStorageNode` method of contract.
func (c *ContractReader) IsStorageNode(key *keys.PublicKey) (bool, error) {
	return unwrap.Bool(c.invoker.Call(c.hash, "isStorageNode", key))
}

// IsStorageNode2 invokes `isStorageNode` method of contract.
func (c *ContractReader) IsStorageNode2(key *keys.PublicKey, epoch *big.Int) (bool, error) {
	return unwrap.Bool(c.invoker.Call(c.hash, "isStorageNode", key, epoch))
}

// LastEpochTime invokes `lastEpochTime` method of contract.
func (c *ContractReader) LastEpochTime() (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "lastEpochTime"))
}

// ListCandidates invokes `listCandidates` method of contract.
func (c *ContractReader) ListCandidates() (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "listCandidates"))
}

// ListCandidatesExpanded is similar to ListCandidates (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) ListCandidatesExpanded(_numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "listCandidates", _numOfIteratorItems))
}

// ListConfig invokes `listConfig` method of contract.
func (c *ContractReader) ListConfig() ([]*NetmapConfigRecord, error) {
	return func(item stackitem.Item, err error) ([]*NetmapConfigRecord, error) {
		if err != nil {
			return nil, err
		}
		return func(item stackitem.Item) ([]*NetmapConfigRecord, error) {
			arr, ok := item.Value().([]stackitem.Item)
			if !ok {
				return nil, errors.New("not an array")
			}
			res := make([]*NetmapConfigRecord, len(arr))
			for i := range res {
				res[i], err = itemToNetmapConfigRecord(arr[i], nil)
				if err != nil {
					return nil, fmt.Errorf("item %d: %w", i, err)
				}
			}
			return res, nil
		}(item)
	}(unwrap.Item(c.invoker.Call(c.hash, "listConfig")))
}

// ListNodes invokes `listNodes` method of contract.
func (c *ContractReader) ListNodes() (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "listNodes"))
}

// ListNodesExpanded is similar to ListNodes (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) ListNodesExpanded(_numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "listNodes", _numOfIteratorItems))
}

// ListNodes2 invokes `listNodes` method of contract.
func (c *ContractReader) ListNodes2(epoch *big.Int) (uuid.UUID, result.Iterator, error) {
	return unwrap.SessionIterator(c.invoker.Call(c.hash, "listNodes", epoch))
}

// ListNodes2Expanded is similar to ListNodes2 (uses the same contract
// method), but can be useful if the server used doesn't support sessions and
// doesn't expand iterators. It creates a script that will get the specified
// number of result items from the iterator right in the VM and return them to
// you. It's only limited by VM stack and GAS available for RPC invocations.
func (c *ContractReader) ListNodes2Expanded(epoch *big.Int, _numOfIteratorItems int) ([]stackitem.Item, error) {
	return unwrap.Array(c.invoker.CallAndExpandIterator(c.hash, "listNodes", _numOfIteratorItems, epoch))
}

// Netmap invokes `netmap` method of contract.
func (c *ContractReader) Netmap() ([]*NetmapNode, error) {
	return func(item stackitem.Item, err error) ([]*NetmapNode, error) {
		if err != nil {
			return nil, err
		}
		return func(item stackitem.Item) ([]*NetmapNode, error) {
			arr, ok := item.Value().([]stackitem.Item)
			if !ok {
				return nil, errors.New("not an array")
			}
			res := make([]*NetmapNode, len(arr))
			for i := range res {
				res[i], err = itemToNetmapNode(arr[i], nil)
				if err != nil {
					return nil, fmt.Errorf("item %d: %w", i, err)
				}
			}
			return res, nil
		}(item)
	}(unwrap.Item(c.invoker.Call(c.hash, "netmap")))
}

// NetmapCandidates invokes `netmapCandidates` method of contract.
func (c *ContractReader) NetmapCandidates() ([]*NetmapNode, error) {
	return func(item stackitem.Item, err error) ([]*NetmapNode, error) {
		if err != nil {
			return nil, err
		}
		return func(item stackitem.Item) ([]*NetmapNode, error) {
			arr, ok := item.Value().([]stackitem.Item)
			if !ok {
				return nil, errors.New("not an array")
			}
			res := make([]*NetmapNode, len(arr))
			for i := range res {
				res[i], err = itemToNetmapNode(arr[i], nil)
				if err != nil {
					return nil, fmt.Errorf("item %d: %w", i, err)
				}
			}
			return res, nil
		}(item)
	}(unwrap.Item(c.invoker.Call(c.hash, "netmapCandidates")))
}

// Snapshot invokes `snapshot` method of contract.
func (c *ContractReader) Snapshot(diff *big.Int) ([]*NetmapNode, error) {
	return func(item stackitem.Item, err error) ([]*NetmapNode, error) {
		if err != nil {
			return nil, err
		}
		return func(item stackitem.Item) ([]*NetmapNode, error) {
			arr, ok := item.Value().([]stackitem.Item)
			if !ok {
				return nil, errors.New("not an array")
			}
			res := make([]*NetmapNode, len(arr))
			for i := range res {
				res[i], err = itemToNetmapNode(arr[i], nil)
				if err != nil {
					return nil, fmt.Errorf("item %d: %w", i, err)
				}
			}
			return res, nil
		}(item)
	}(unwrap.Item(c.invoker.Call(c.hash, "snapshot", diff)))
}

// SnapshotByEpoch invokes `snapshotByEpoch` method of contract.
func (c *ContractReader) SnapshotByEpoch(epoch *big.Int) ([]*NetmapNode, error) {
	return func(item stackitem.Item, err error) ([]*NetmapNode, error) {
		if err != nil {
			return nil, err
		}
		return func(item stackitem.Item) ([]*NetmapNode, error) {
			arr, ok := item.Value().([]stackitem.Item)
			if !ok {
				return nil, errors.New("not an array")
			}
			res := make([]*NetmapNode, len(arr))
			for i := range res {
				res[i], err = itemToNetmapNode(arr[i], nil)
				if err != nil {
					return nil, fmt.Errorf("item %d: %w", i, err)
				}
			}
			return res, nil
		}(item)
	}(unwrap.Item(c.invoker.Call(c.hash, "snapshotByEpoch", epoch)))
}

// UnusedCandidate invokes `unusedCandidate` method of contract.
func (c *ContractReader) UnusedCandidate() (*NetmapCandidate, error) {
	return itemToNetmapCandidate(unwrap.Item(c.invoker.Call(c.hash, "unusedCandidate")))
}

// Version invokes `version` method of contract.
func (c *ContractReader) Version() (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(c.hash, "version"))
}

// AddNode creates a transaction invoking `addNode` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) AddNode(n *NetmapNode2) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "addNode", n)
}

// AddNodeTransaction creates a transaction invoking `addNode` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) AddNodeTransaction(n *NetmapNode2) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "addNode", n)
}

// AddNodeUnsigned creates a transaction invoking `addNode` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) AddNodeUnsigned(n *NetmapNode2) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "addNode", nil, n)
}

// AddPeer creates a transaction invoking `addPeer` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) AddPeer(nodeInfo []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "addPeer", nodeInfo)
}

// AddPeerTransaction creates a transaction invoking `addPeer` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) AddPeerTransaction(nodeInfo []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "addPeer", nodeInfo)
}

// AddPeerUnsigned creates a transaction invoking `addPeer` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) AddPeerUnsigned(nodeInfo []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "addPeer", nil, nodeInfo)
}

// AddPeerIR creates a transaction invoking `addPeerIR` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) AddPeerIR(nodeInfo []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "addPeerIR", nodeInfo)
}

// AddPeerIRTransaction creates a transaction invoking `addPeerIR` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) AddPeerIRTransaction(nodeInfo []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "addPeerIR", nodeInfo)
}

// AddPeerIRUnsigned creates a transaction invoking `addPeerIR` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) AddPeerIRUnsigned(nodeInfo []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "addPeerIR", nil, nodeInfo)
}

// DeleteNode creates a transaction invoking `deleteNode` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) DeleteNode(pkey *keys.PublicKey) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "deleteNode", pkey)
}

// DeleteNodeTransaction creates a transaction invoking `deleteNode` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) DeleteNodeTransaction(pkey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "deleteNode", pkey)
}

// DeleteNodeUnsigned creates a transaction invoking `deleteNode` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) DeleteNodeUnsigned(pkey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "deleteNode", nil, pkey)
}

// LastEpochBlock creates a transaction invoking `lastEpochBlock` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) LastEpochBlock() (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "lastEpochBlock")
}

// LastEpochBlockTransaction creates a transaction invoking `lastEpochBlock` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) LastEpochBlockTransaction() (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "lastEpochBlock")
}

// LastEpochBlockUnsigned creates a transaction invoking `lastEpochBlock` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) LastEpochBlockUnsigned() (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "lastEpochBlock", nil)
}

// NewEpoch creates a transaction invoking `newEpoch` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) NewEpoch(epochNum *big.Int) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "newEpoch", epochNum)
}

// NewEpochTransaction creates a transaction invoking `newEpoch` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) NewEpochTransaction(epochNum *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "newEpoch", epochNum)
}

// NewEpochUnsigned creates a transaction invoking `newEpoch` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) NewEpochUnsigned(epochNum *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "newEpoch", nil, epochNum)
}

// SetCleanupThreshold creates a transaction invoking `setCleanupThreshold` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) SetCleanupThreshold(val *big.Int) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "setCleanupThreshold", val)
}

// SetCleanupThresholdTransaction creates a transaction invoking `setCleanupThreshold` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) SetCleanupThresholdTransaction(val *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "setCleanupThreshold", val)
}

// SetCleanupThresholdUnsigned creates a transaction invoking `setCleanupThreshold` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) SetCleanupThresholdUnsigned(val *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "setCleanupThreshold", nil, val)
}

// SetConfig creates a transaction invoking `setConfig` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) SetConfig(id []byte, key []byte, val []byte) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "setConfig", id, key, val)
}

// SetConfigTransaction creates a transaction invoking `setConfig` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) SetConfigTransaction(id []byte, key []byte, val []byte) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "setConfig", id, key, val)
}

// SetConfigUnsigned creates a transaction invoking `setConfig` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) SetConfigUnsigned(id []byte, key []byte, val []byte) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "setConfig", nil, id, key, val)
}

// SubscribeForNewEpoch creates a transaction invoking `subscribeForNewEpoch` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) SubscribeForNewEpoch(contract util.Uint160) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "subscribeForNewEpoch", contract)
}

// SubscribeForNewEpochTransaction creates a transaction invoking `subscribeForNewEpoch` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) SubscribeForNewEpochTransaction(contract util.Uint160) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "subscribeForNewEpoch", contract)
}

// SubscribeForNewEpochUnsigned creates a transaction invoking `subscribeForNewEpoch` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) SubscribeForNewEpochUnsigned(contract util.Uint160) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "subscribeForNewEpoch", nil, contract)
}

// UnsubscribeFromNewEpoch creates a transaction invoking `unsubscribeFromNewEpoch` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) UnsubscribeFromNewEpoch(contract util.Uint160) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "unsubscribeFromNewEpoch", contract)
}

// UnsubscribeFromNewEpochTransaction creates a transaction invoking `unsubscribeFromNewEpoch` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) UnsubscribeFromNewEpochTransaction(contract util.Uint160) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "unsubscribeFromNewEpoch", contract)
}

// UnsubscribeFromNewEpochUnsigned creates a transaction invoking `unsubscribeFromNewEpoch` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) UnsubscribeFromNewEpochUnsigned(contract util.Uint160) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "unsubscribeFromNewEpoch", nil, contract)
}

// UpdateSnapshotCount creates a transaction invoking `updateSnapshotCount` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) UpdateSnapshotCount(count *big.Int) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "updateSnapshotCount", count)
}

// UpdateSnapshotCountTransaction creates a transaction invoking `updateSnapshotCount` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) UpdateSnapshotCountTransaction(count *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "updateSnapshotCount", count)
}

// UpdateSnapshotCountUnsigned creates a transaction invoking `updateSnapshotCount` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) UpdateSnapshotCountUnsigned(count *big.Int) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "updateSnapshotCount", nil, count)
}

// UpdateState creates a transaction invoking `updateState` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) UpdateState(state *big.Int, publicKey *keys.PublicKey) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "updateState", state, publicKey)
}

// UpdateStateTransaction creates a transaction invoking `updateState` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) UpdateStateTransaction(state *big.Int, publicKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "updateState", state, publicKey)
}

// UpdateStateUnsigned creates a transaction invoking `updateState` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) UpdateStateUnsigned(state *big.Int, publicKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "updateState", nil, state, publicKey)
}

// UpdateStateIR creates a transaction invoking `updateStateIR` method of the contract.
// This transaction is signed and immediately sent to the network.
// The values returned are its hash, ValidUntilBlock value and error if any.
func (c *Contract) UpdateStateIR(state *big.Int, publicKey *keys.PublicKey) (util.Uint256, uint32, error) {
	return c.actor.SendCall(c.hash, "updateStateIR", state, publicKey)
}

// UpdateStateIRTransaction creates a transaction invoking `updateStateIR` method of the contract.
// This transaction is signed, but not sent to the network, instead it's
// returned to the caller.
func (c *Contract) UpdateStateIRTransaction(state *big.Int, publicKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeCall(c.hash, "updateStateIR", state, publicKey)
}

// UpdateStateIRUnsigned creates a transaction invoking `updateStateIR` method of the contract.
// This transaction is not signed, it's simply returned to the caller.
// Any fields of it that do not affect fees can be changed (ValidUntilBlock,
// Nonce), fee values (NetworkFee, SystemFee) can be increased as well.
func (c *Contract) UpdateStateIRUnsigned(state *big.Int, publicKey *keys.PublicKey) (*transaction.Transaction, error) {
	return c.actor.MakeUnsignedCall(c.hash, "updateStateIR", nil, state, publicKey)
}

// itemToCommonIRNode converts stack item into *CommonIRNode.
// NULL item is returned as nil pointer without error.
func itemToCommonIRNode(item stackitem.Item, err error) (*CommonIRNode, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(CommonIRNode)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *CommonIRNode is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&CommonIRNode{})

// Ensure *CommonIRNode is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&CommonIRNode{})

// FromStackItem retrieves fields of CommonIRNode from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *CommonIRNode) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.PublicKey, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field PublicKey: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing CommonIRNode.
// It implements [stackitem.Convertible] interface.
func (res *CommonIRNode) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 1)
	)
	itm, err = stackitem.NewByteArray(res.PublicKey.Bytes()), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field PublicKey: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing CommonIRNode.
// It implements [smartcontract.Convertible] interface so that CommonIRNode
// could be used with invokers.
func (res *CommonIRNode) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 1)
	)
	prm, err = smartcontract.NewParameterFromValue(res.PublicKey)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field PublicKey: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToNetmapCandidate converts stack item into *NetmapCandidate.
// NULL item is returned as nil pointer without error.
func itemToNetmapCandidate(item stackitem.Item, err error) (*NetmapCandidate, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(NetmapCandidate)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *NetmapCandidate is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&NetmapCandidate{})

// Ensure *NetmapCandidate is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&NetmapCandidate{})

// FromStackItem retrieves fields of NetmapCandidate from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *NetmapCandidate) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 5 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.Addresses, err = func(item stackitem.Item) ([]string, error) {
		arr, ok := item.Value().([]stackitem.Item)
		if !ok {
			return nil, errors.New("not an array")
		}
		res := make([]string, len(arr))
		for i := range res {
			res[i], err = func(item stackitem.Item) (string, error) {
				b, err := item.TryBytes()
				if err != nil {
					return "", err
				}
				if !utf8.Valid(b) {
					return "", errors.New("not a UTF-8 string")
				}
				return string(b), nil
			}(arr[i])
			if err != nil {
				return nil, fmt.Errorf("item %d: %w", i, err)
			}
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Addresses: %w", err)
	}

	index++
	res.Attributes, err = func(item stackitem.Item) (map[string]string, error) {
		m, ok := item.Value().([]stackitem.MapElement)
		if !ok {
			return nil, fmt.Errorf("%s is not a map", item.Type().String())
		}
		res := make(map[string]string)
		for i := range m {
			k, err := func(item stackitem.Item) (string, error) {
				b, err := item.TryBytes()
				if err != nil {
					return "", err
				}
				if !utf8.Valid(b) {
					return "", errors.New("not a UTF-8 string")
				}
				return string(b), nil
			}(m[i].Key)
			if err != nil {
				return nil, fmt.Errorf("key %d: %w", i, err)
			}
			v, err := func(item stackitem.Item) (string, error) {
				b, err := item.TryBytes()
				if err != nil {
					return "", err
				}
				if !utf8.Valid(b) {
					return "", errors.New("not a UTF-8 string")
				}
				return string(b), nil
			}(m[i].Value)
			if err != nil {
				return nil, fmt.Errorf("value %d: %w", i, err)
			}
			res[k] = v
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Attributes: %w", err)
	}

	index++
	res.Key, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Key: %w", err)
	}

	index++
	res.State, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field State: %w", err)
	}

	index++
	res.LastActiveEpoch, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field LastActiveEpoch: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing NetmapCandidate.
// It implements [stackitem.Convertible] interface.
func (res *NetmapCandidate) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 5)
	)
	itm, err = func(in []string) (stackitem.Item, error) {
		if in == nil {
			return stackitem.Null{}, nil
		}

		var items = make([]stackitem.Item, 0, len(in))
		for i, v := range in {
			itm, err := stackitem.NewByteArray([]byte(v)), error(nil)
			if err != nil {
				return nil, fmt.Errorf("item %d: %w", i, err)
			}
			items = append(items, itm)
		}
		return stackitem.NewArray(items), nil
	}(res.Addresses)
	if err != nil {
		return nil, fmt.Errorf("field Addresses: %w", err)
	}
	items = append(items, itm)

	itm, err = func(in map[string]string) (stackitem.Item, error) {
		if in == nil {
			return stackitem.Null{}, nil
		}

		var m = stackitem.NewMap()
		for k, v := range in {
			iKey, err := stackitem.NewByteArray([]byte(k)), error(nil)
			if err != nil {
				return nil, fmt.Errorf("key %v: %w", k, err)
			}
			iVal, err := stackitem.NewByteArray([]byte(v)), error(nil)
			if err != nil {
				return nil, fmt.Errorf("key %v, wrong value: %w", k, err)
			}
			m.Add(iKey, iVal)
		}
		return m, nil
	}(res.Attributes)
	if err != nil {
		return nil, fmt.Errorf("field Attributes: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Key.Bytes()), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Key: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.State), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field State: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.LastActiveEpoch), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field LastActiveEpoch: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing NetmapCandidate.
// It implements [smartcontract.Convertible] interface so that NetmapCandidate
// could be used with invokers.
func (res *NetmapCandidate) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 5)
	)
	prm, err = func(in []string) (smartcontract.Parameter, error) {
		if in == nil {
			return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
		}

		var prms = make([]smartcontract.Parameter, 0, len(in))
		for i, v := range in {
			prm, err := smartcontract.NewParameterFromValue(v)
			if err != nil {
				return smartcontract.Parameter{}, fmt.Errorf("item %d: %w", i, err)
			}
			prms = append(prms, prm)
		}
		return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
	}(res.Addresses)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Addresses: %w", err)
	}
	prms = append(prms, prm)

	prm, err = func(in map[string]string) (smartcontract.Parameter, error) {
		if in == nil {
			return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
		}

		var prms = make([]smartcontract.ParameterPair, 0, len(in))
		for k, v := range in {
			iKey, err := smartcontract.NewParameterFromValue(k)
			if err != nil {
				return smartcontract.Parameter{}, fmt.Errorf("key %v: %w", k, err)
			}
			iVal, err := smartcontract.NewParameterFromValue(v)
			if err != nil {
				return smartcontract.Parameter{}, fmt.Errorf("key %v, wrong value: %w", k, err)
			}
			prms = append(prms, smartcontract.ParameterPair{Key: iKey, Value: iVal})
		}
		return smartcontract.Parameter{Type: smartcontract.MapType, Value: prms}, nil
	}(res.Attributes)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Attributes: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Key)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Key: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.State)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field State: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.LastActiveEpoch)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field LastActiveEpoch: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToNetmapConfigRecord converts stack item into *NetmapConfigRecord.
// NULL item is returned as nil pointer without error.
func itemToNetmapConfigRecord(item stackitem.Item, err error) (*NetmapConfigRecord, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(NetmapConfigRecord)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *NetmapConfigRecord is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&NetmapConfigRecord{})

// Ensure *NetmapConfigRecord is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&NetmapConfigRecord{})

// FromStackItem retrieves fields of NetmapConfigRecord from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *NetmapConfigRecord) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.Key, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Key: %w", err)
	}

	index++
	res.Value, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field Value: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing NetmapConfigRecord.
// It implements [stackitem.Convertible] interface.
func (res *NetmapConfigRecord) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 2)
	)
	itm, err = stackitem.NewByteArray(res.Key), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Key: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Value), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Value: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing NetmapConfigRecord.
// It implements [smartcontract.Convertible] interface so that NetmapConfigRecord
// could be used with invokers.
func (res *NetmapConfigRecord) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 2)
	)
	prm, err = smartcontract.NewParameterFromValue(res.Key)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Key: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Value)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Value: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToNetmapNode converts stack item into *NetmapNode.
// NULL item is returned as nil pointer without error.
func itemToNetmapNode(item stackitem.Item, err error) (*NetmapNode, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(NetmapNode)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *NetmapNode is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&NetmapNode{})

// Ensure *NetmapNode is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&NetmapNode{})

// FromStackItem retrieves fields of NetmapNode from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *NetmapNode) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.BLOB, err = arr[index].TryBytes()
	if err != nil {
		return fmt.Errorf("field BLOB: %w", err)
	}

	index++
	res.State, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field State: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing NetmapNode.
// It implements [stackitem.Convertible] interface.
func (res *NetmapNode) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 2)
	)
	itm, err = stackitem.NewByteArray(res.BLOB), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field BLOB: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.State), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field State: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing NetmapNode.
// It implements [smartcontract.Convertible] interface so that NetmapNode
// could be used with invokers.
func (res *NetmapNode) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 2)
	)
	prm, err = smartcontract.NewParameterFromValue(res.BLOB)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field BLOB: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.State)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field State: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// itemToNetmapNode2 converts stack item into *NetmapNode2.
// NULL item is returned as nil pointer without error.
func itemToNetmapNode2(item stackitem.Item, err error) (*NetmapNode2, error) {
	if err != nil {
		return nil, err
	}
	_, null := item.(stackitem.Null)
	if null {
		return nil, nil
	}
	var res = new(NetmapNode2)
	err = res.FromStackItem(item)
	return res, err
}

// Ensure *NetmapNode2 is a proper [stackitem.Convertible].
var _ = stackitem.Convertible(&NetmapNode2{})

// Ensure *NetmapNode2 is a proper [smartcontract.Convertible].
var _ = smartcontract.Convertible(&NetmapNode2{})

// FromStackItem retrieves fields of NetmapNode2 from the given
// [stackitem.Item] or returns an error if it's not possible to do to so.
// It implements [stackitem.Convertible] interface.
func (res *NetmapNode2) FromStackItem(item stackitem.Item) error {
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 4 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	res.Addresses, err = func(item stackitem.Item) ([]string, error) {
		arr, ok := item.Value().([]stackitem.Item)
		if !ok {
			return nil, errors.New("not an array")
		}
		res := make([]string, len(arr))
		for i := range res {
			res[i], err = func(item stackitem.Item) (string, error) {
				b, err := item.TryBytes()
				if err != nil {
					return "", err
				}
				if !utf8.Valid(b) {
					return "", errors.New("not a UTF-8 string")
				}
				return string(b), nil
			}(arr[i])
			if err != nil {
				return nil, fmt.Errorf("item %d: %w", i, err)
			}
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Addresses: %w", err)
	}

	index++
	res.Attributes, err = func(item stackitem.Item) (map[string]string, error) {
		m, ok := item.Value().([]stackitem.MapElement)
		if !ok {
			return nil, fmt.Errorf("%s is not a map", item.Type().String())
		}
		res := make(map[string]string)
		for i := range m {
			k, err := func(item stackitem.Item) (string, error) {
				b, err := item.TryBytes()
				if err != nil {
					return "", err
				}
				if !utf8.Valid(b) {
					return "", errors.New("not a UTF-8 string")
				}
				return string(b), nil
			}(m[i].Key)
			if err != nil {
				return nil, fmt.Errorf("key %d: %w", i, err)
			}
			v, err := func(item stackitem.Item) (string, error) {
				b, err := item.TryBytes()
				if err != nil {
					return "", err
				}
				if !utf8.Valid(b) {
					return "", errors.New("not a UTF-8 string")
				}
				return string(b), nil
			}(m[i].Value)
			if err != nil {
				return nil, fmt.Errorf("value %d: %w", i, err)
			}
			res[k] = v
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Attributes: %w", err)
	}

	index++
	res.Key, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Key: %w", err)
	}

	index++
	res.State, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field State: %w", err)
	}

	return nil
}

// ToStackItem creates [stackitem.Item] representing NetmapNode2.
// It implements [stackitem.Convertible] interface.
func (res *NetmapNode2) ToStackItem() (stackitem.Item, error) {
	if res == nil {
		return stackitem.Null{}, nil
	}

	var (
		err   error
		itm   stackitem.Item
		items = make([]stackitem.Item, 0, 4)
	)
	itm, err = func(in []string) (stackitem.Item, error) {
		if in == nil {
			return stackitem.Null{}, nil
		}

		var items = make([]stackitem.Item, 0, len(in))
		for i, v := range in {
			itm, err := stackitem.NewByteArray([]byte(v)), error(nil)
			if err != nil {
				return nil, fmt.Errorf("item %d: %w", i, err)
			}
			items = append(items, itm)
		}
		return stackitem.NewArray(items), nil
	}(res.Addresses)
	if err != nil {
		return nil, fmt.Errorf("field Addresses: %w", err)
	}
	items = append(items, itm)

	itm, err = func(in map[string]string) (stackitem.Item, error) {
		if in == nil {
			return stackitem.Null{}, nil
		}

		var m = stackitem.NewMap()
		for k, v := range in {
			iKey, err := stackitem.NewByteArray([]byte(k)), error(nil)
			if err != nil {
				return nil, fmt.Errorf("key %v: %w", k, err)
			}
			iVal, err := stackitem.NewByteArray([]byte(v)), error(nil)
			if err != nil {
				return nil, fmt.Errorf("key %v, wrong value: %w", k, err)
			}
			m.Add(iKey, iVal)
		}
		return m, nil
	}(res.Attributes)
	if err != nil {
		return nil, fmt.Errorf("field Attributes: %w", err)
	}
	items = append(items, itm)

	itm, err = stackitem.NewByteArray(res.Key.Bytes()), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field Key: %w", err)
	}
	items = append(items, itm)

	itm, err = (*stackitem.BigInteger)(res.State), error(nil)
	if err != nil {
		return nil, fmt.Errorf("field State: %w", err)
	}
	items = append(items, itm)

	return stackitem.NewStruct(items), nil
}

// ToSCParameter creates [smartcontract.Parameter] representing NetmapNode2.
// It implements [smartcontract.Convertible] interface so that NetmapNode2
// could be used with invokers.
func (res *NetmapNode2) ToSCParameter() (smartcontract.Parameter, error) {
	if res == nil {
		return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
	}

	var (
		err  error
		prm  smartcontract.Parameter
		prms = make([]smartcontract.Parameter, 0, 4)
	)
	prm, err = func(in []string) (smartcontract.Parameter, error) {
		if in == nil {
			return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
		}

		var prms = make([]smartcontract.Parameter, 0, len(in))
		for i, v := range in {
			prm, err := smartcontract.NewParameterFromValue(v)
			if err != nil {
				return smartcontract.Parameter{}, fmt.Errorf("item %d: %w", i, err)
			}
			prms = append(prms, prm)
		}
		return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
	}(res.Addresses)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Addresses: %w", err)
	}
	prms = append(prms, prm)

	prm, err = func(in map[string]string) (smartcontract.Parameter, error) {
		if in == nil {
			return smartcontract.Parameter{Type: smartcontract.AnyType}, nil
		}

		var prms = make([]smartcontract.ParameterPair, 0, len(in))
		for k, v := range in {
			iKey, err := smartcontract.NewParameterFromValue(k)
			if err != nil {
				return smartcontract.Parameter{}, fmt.Errorf("key %v: %w", k, err)
			}
			iVal, err := smartcontract.NewParameterFromValue(v)
			if err != nil {
				return smartcontract.Parameter{}, fmt.Errorf("key %v, wrong value: %w", k, err)
			}
			prms = append(prms, smartcontract.ParameterPair{Key: iKey, Value: iVal})
		}
		return smartcontract.Parameter{Type: smartcontract.MapType, Value: prms}, nil
	}(res.Attributes)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Attributes: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.Key)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field Key: %w", err)
	}
	prms = append(prms, prm)

	prm, err = smartcontract.NewParameterFromValue(res.State)
	if err != nil {
		return smartcontract.Parameter{}, fmt.Errorf("field State: %w", err)
	}
	prms = append(prms, prm)

	return smartcontract.Parameter{Type: smartcontract.ArrayType, Value: prms}, nil
}

// AddNodeEventsFromApplicationLog retrieves a set of all emitted events
// with "AddNode" name from the provided [result.ApplicationLog].
func AddNodeEventsFromApplicationLog(log *result.ApplicationLog) ([]*AddNodeEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*AddNodeEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "AddNode" {
				continue
			}
			event := new(AddNodeEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize AddNodeEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to AddNodeEvent or
// returns an error if it's not possible to do to so.
func (e *AddNodeEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 3 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.PublicKey, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field PublicKey: %w", err)
	}

	index++
	e.Addresses, err = func(item stackitem.Item) ([]any, error) {
		arr, ok := item.Value().([]stackitem.Item)
		if !ok {
			return nil, errors.New("not an array")
		}
		res := make([]any, len(arr))
		for i := range res {
			res[i], err = arr[i].Value(), error(nil)
			if err != nil {
				return nil, fmt.Errorf("item %d: %w", i, err)
			}
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Addresses: %w", err)
	}

	index++
	e.Attributes, err = func(item stackitem.Item) (map[any]any, error) {
		m, ok := item.Value().([]stackitem.MapElement)
		if !ok {
			return nil, fmt.Errorf("%s is not a map", item.Type().String())
		}
		res := make(map[any]any)
		for i := range m {
			k, err := m[i].Key.Value(), error(nil)
			if err != nil {
				return nil, fmt.Errorf("key %d: %w", i, err)
			}
			v, err := m[i].Value.Value(), error(nil)
			if err != nil {
				return nil, fmt.Errorf("value %d: %w", i, err)
			}
			res[k] = v
		}
		return res, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Attributes: %w", err)
	}

	return nil
}

// AddPeerSuccessEventsFromApplicationLog retrieves a set of all emitted events
// with "AddPeerSuccess" name from the provided [result.ApplicationLog].
func AddPeerSuccessEventsFromApplicationLog(log *result.ApplicationLog) ([]*AddPeerSuccessEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*AddPeerSuccessEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "AddPeerSuccess" {
				continue
			}
			event := new(AddPeerSuccessEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize AddPeerSuccessEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to AddPeerSuccessEvent or
// returns an error if it's not possible to do to so.
func (e *AddPeerSuccessEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.PublicKey, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field PublicKey: %w", err)
	}

	return nil
}

// UpdateStateSuccessEventsFromApplicationLog retrieves a set of all emitted events
// with "UpdateStateSuccess" name from the provided [result.ApplicationLog].
func UpdateStateSuccessEventsFromApplicationLog(log *result.ApplicationLog) ([]*UpdateStateSuccessEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*UpdateStateSuccessEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "UpdateStateSuccess" {
				continue
			}
			event := new(UpdateStateSuccessEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize UpdateStateSuccessEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to UpdateStateSuccessEvent or
// returns an error if it's not possible to do to so.
func (e *UpdateStateSuccessEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 2 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.PublicKey, err = func(item stackitem.Item) (*keys.PublicKey, error) {
		b, err := item.TryBytes()
		if err != nil {
			return nil, err
		}
		k, err := keys.NewPublicKeyFromBytes(b, elliptic.P256())
		if err != nil {
			return nil, err
		}
		return k, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field PublicKey: %w", err)
	}

	index++
	e.State, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field State: %w", err)
	}

	return nil
}

// NewEpochEventsFromApplicationLog retrieves a set of all emitted events
// with "NewEpoch" name from the provided [result.ApplicationLog].
func NewEpochEventsFromApplicationLog(log *result.ApplicationLog) ([]*NewEpochEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*NewEpochEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "NewEpoch" {
				continue
			}
			event := new(NewEpochEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize NewEpochEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to NewEpochEvent or
// returns an error if it's not possible to do to so.
func (e *NewEpochEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.Epoch, err = arr[index].TryInteger()
	if err != nil {
		return fmt.Errorf("field Epoch: %w", err)
	}

	return nil
}

// NewEpochSubscriptionEventsFromApplicationLog retrieves a set of all emitted events
// with "NewEpochSubscription" name from the provided [result.ApplicationLog].
func NewEpochSubscriptionEventsFromApplicationLog(log *result.ApplicationLog) ([]*NewEpochSubscriptionEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*NewEpochSubscriptionEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "NewEpochSubscription" {
				continue
			}
			event := new(NewEpochSubscriptionEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize NewEpochSubscriptionEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to NewEpochSubscriptionEvent or
// returns an error if it's not possible to do to so.
func (e *NewEpochSubscriptionEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.Contract, err = func(item stackitem.Item) (util.Uint160, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint160{}, err
		}
		u, err := util.Uint160DecodeBytesBE(b)
		if err != nil {
			return util.Uint160{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Contract: %w", err)
	}

	return nil
}

// NewEpochUnsubscriptionEventsFromApplicationLog retrieves a set of all emitted events
// with "NewEpochUnsubscription" name from the provided [result.ApplicationLog].
func NewEpochUnsubscriptionEventsFromApplicationLog(log *result.ApplicationLog) ([]*NewEpochUnsubscriptionEvent, error) {
	if log == nil {
		return nil, errors.New("nil application log")
	}

	var res []*NewEpochUnsubscriptionEvent
	for i, ex := range log.Executions {
		for j, e := range ex.Events {
			if e.Name != "NewEpochUnsubscription" {
				continue
			}
			event := new(NewEpochUnsubscriptionEvent)
			err := event.FromStackItem(e.Item)
			if err != nil {
				return nil, fmt.Errorf("failed to deserialize NewEpochUnsubscriptionEvent from stackitem (execution #%d, event #%d): %w", i, j, err)
			}
			res = append(res, event)
		}
	}

	return res, nil
}

// FromStackItem converts provided [stackitem.Array] to NewEpochUnsubscriptionEvent or
// returns an error if it's not possible to do to so.
func (e *NewEpochUnsubscriptionEvent) FromStackItem(item *stackitem.Array) error {
	if item == nil {
		return errors.New("nil item")
	}
	arr, ok := item.Value().([]stackitem.Item)
	if !ok {
		return errors.New("not an array")
	}
	if len(arr) != 1 {
		return errors.New("wrong number of structure elements")
	}

	var (
		index = -1
		err   error
	)
	index++
	e.Contract, err = func(item stackitem.Item) (util.Uint160, error) {
		b, err := item.TryBytes()
		if err != nil {
			return util.Uint160{}, err
		}
		u, err := util.Uint160DecodeBytesBE(b)
		if err != nil {
			return util.Uint160{}, err
		}
		return u, nil
	}(arr[index])
	if err != nil {
		return fmt.Errorf("field Contract: %w", err)
	}

	return nil
}
